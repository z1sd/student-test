#include <iostream>
#include <vector>

using namespace std;

vector<int> calculateLPS(string pattern) {
    int n = pattern.length();
    vector<int> lps(n, 0);

    int len = 0;
    int i = 1;

    while (i < n) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;

i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }

    return lps;

vector<int> KMP(string text, string pattern) {
    vector<int> lps = calculateLPS(pattern);

    int n = text.length();
    int m = pattern.length();
    vector<int> indices;

    int i = 0;
    int j = 0;

    while (i < n) {
        if (text[i] == pattern[j]) {
            i++;
            j++;
        }

        if (j == m) {
            indices.push_back(i - j);
            j = lps[j - 1];
        } else if (i < n && text[i] != pattern[j]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    return indices;
}

int main() {
    string text = "ABABDABACDABABCABAB";
    string pattern = "ABABCABAB";
    vector<int> indices = KMP(text, pattern);

    if (indices.empty()) {
        cout << "Pattern not found in the text!" << endl;
    } else {
        cout << "Pattern found at positions: ";
        for (int i = 0; i < indices.size(); i++) {
            cout << indices[i] << " ";
        }
        cout << endl;
    }

    return 0;
}
